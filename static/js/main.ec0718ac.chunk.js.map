{"version":3,"sources":["Asset.js","Investment.js","App.js","index.js"],"names":["Asset","quantity","this","props","assetInfo","toLocaleString","react_default","a","createElement","className","asset_class","investment_date","cost","$","Component","Investment","state","assetsShown","_this","showing","componentDidUpdate","prevProps","setState","toggleAssets","arrow","shares","filterAssets","investmentInfo","issued_assets","reduce","acc","asset","assets","map","src_Asset","key","id","Fragment","onClick","name","App","investments","showingAssets","date","Date","formattedDate","componentDidMount","getInvestments","_callee","response","regenerator_default","wrap","_context","prev","next","convertDate","fetch","sent","json","stop","y","getFullYear","toString","m","getMonth","d","getDate","length","concat","filter","convertDateToMS","collapseAll","expandAll","setDate","dateToString","String","reversedDate","split","reverse","temp","newDate","join","getTime","_this2","investment","src_Investment","selectedDate","totalCost","totalShares","es","selected","onChange","todayButton","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.ec0718ac.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Asset extends Component {\n  static propTypes = {\n    assetInfo: PropTypes.object.isRequired,\n  }\n\n  render() {\n    let quantity = this.props.assetInfo.quantity ? (this.props.assetInfo.quantity).toLocaleString() : 0;\n\n    return (\n      <tr className=\"asset\">\n        <td />\n        <td>{this.props.assetInfo.asset_class}</td>\n        <td>{this.props.assetInfo.investment_date}</td>\n        <td>$ {quantity}</td>\n        <td>$ {(this.props.assetInfo.cost.$).toLocaleString()}</td>\n      </tr>\n    )\n  }\n}\n\nexport default Asset;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Asset from \"./Asset\";\n\nclass Investment extends Component {\n  static propTypes = {\n    investmentInfo: PropTypes.object.isRequired,\n  }\n\n  state = {\n      assetsShown: this.props.showing,\n  }\n\n  componentDidUpdate = prevProps => {\n    if (prevProps !== this.props) {\n        this.setState({\n            assetsShown: this.props.showing,\n        })\n    }\n  }\n  \n  toggleAssets = () => {\n      this.setState({\n          assetsShown: !this.state.assetsShown,\n      })\n  }\n\n  render() {\n\n    let shares = this.props.filterAssets(this.props.investmentInfo.issued_assets).reduce((acc, asset) => acc + asset.quantity, 0).toLocaleString();\n\n    let cost = this.props.filterAssets(this.props.investmentInfo.issued_assets).reduce((acc, asset) => acc + asset.cost.$, 0).toLocaleString();\n    \n    let assets = this.props.filterAssets(this.props.investmentInfo.issued_assets).map(asset => <Asset assetInfo={asset} key={asset.id} />)\n\n    let arrow;\n        this.state.assetsShown === true ?\n            arrow = <i className=\"fas fa-caret-down arrow\"></i> :\n            arrow = <i className=\"fas fa-caret-right arrow\"></i>\n\n    return (\n        <React.Fragment>\n            <tr className=\"investment\">\n                <td><span className=\"expand\" onClick={this.toggleAssets}>{this.props.investmentInfo.name}{arrow}</span></td>\n                <td></td>\n                <td></td>\n                <td>$ {shares}</td>\n                <td>$ {cost}</td>\n            </tr>\n            {this.state.assetsShown ? [assets] : null}\n        </React.Fragment>\n    )\n  }\n}\n\nexport default Investment;\n","import React, { Component } from 'react';\nimport DatePicker from \"react-datepicker\";\nimport Investment from './Investment';\n\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nclass App extends Component {\n  state = {\n    investments: [],\n    showingAssets: true,\n    date: new Date(),\n    formattedDate: null\n  };\n\n  componentDidMount = () => {\n    this.getInvestments();\n  };\n\n  // Handles API call for investments\n  getInvestments = async () => {\n    let formattedDate = this.state.formattedDate\n      ? this.state.formattedDate\n      : this.convertDate(this.state.date);\n\n    let response = await fetch(\n      \"https://gist.githubusercontent.com/cranium/d8b83184bf0750f2c834760b7c9203dc/raw/a73a70716951f77b90e84b8848ff1fee46938dd1/soi.json?date=\" +\n        formattedDate\n    );\n    let investments = await response.json();\n\n    this.setState({\n      investments,\n      formattedDate\n    });\n  };\n\n  // Method to convert date to YYYY-MM-DD format\n  convertDate = date => {\n    let y = date.getFullYear().toString();\n    let m = (date.getMonth() + 1).toString();\n    let d = date.getDate().toString();\n\n    d.length === 1 && (d = \"0\" + d);\n    m.length === 1 && (m = \"0\" + m);\n\n    let yyyymmdd = `${y}-${m}-${d}`;\n\n    return yyyymmdd;\n  };\n  \n  filterAssets = assets => assets\n    .filter(asset => {\n      return this.convertDateToMS(asset.investment_date) <= this.convertDateToMS(this.state.formattedDate)});\n\n  // Collapse all investment assets\n  collapseAll = () => {\n    this.setState({\n      showingAssets: false\n    });\n  };\n\n  // Expand all investment assets\n  expandAll = () => {\n    this.setState({\n      showingAssets: true\n    });\n  };\n\n  // Set date to user input\n  setDate = date => {\n    this.setState({\n      date: date,\n      formattedDate: this.convertDate(date)\n    });\n  };\n\n  convertDateToMS = date => {\n    let dateToString = String(date);\n\n    if (dateToString[2] === \"/\") { \n      // Split and reverse order from MM-DD-YYYY to YYYY-DD-MM\n      let reversedDate = dateToString.split(\"/\").reverse();\n      // Swap the second and third element so order is YYYY-MM-DD\n      let temp = reversedDate[1];\n      reversedDate[1] = reversedDate[2];\n      reversedDate[2] = temp;\n\n      let newDate = reversedDate.join(\"-\");\n\n      return new Date(newDate).getTime();\n    } else {\n      return new Date(dateToString).getTime();\n    }\n\n  };\n\n  render() {\n    let investments = this.state.investments.map(investment => (\n      <Investment\n        investmentInfo={investment}\n        key={investment.id}\n        showing={this.state.showingAssets}\n        selectedDate={this.state.formattedDate}\n        convertDateToMS={this.convertDateToMS}\n        filterAssets={this.filterAssets}\n      />\n    ));\n    \n    // Find total cost by filtering assets by date then summing up remaining assets' cost\n    let totalCost = this.state.investments\n      .reduce((acc, investment) => {\n        let assetCost = this.filterAssets(investment.issued_assets).reduce((acc, asset) => acc + asset.cost.$, 0);\n        return acc + assetCost}, 0)\n      .toLocaleString();\n\n    let totalShares = this.state.investments\n      .reduce((acc, investment) => {\n        let assetShares = this.filterAssets(investment.issued_assets).reduce((acc, asset) => acc + asset.quantity, 0);\n        return acc + assetShares}, 0)\n      .toLocaleString();\n\n    return <div className=\"app\">\n        <h1 className=\"title\">Carta Investor Services</h1>\n        <div className=\"options\">\n          <button onClick={this.collapseAll}>Collapse All</button>\n          <button onClick={this.expandAll}>Expand All</button>\n          <DatePicker selected={this.state.date} onChange={this.setDate} todayButton={\"Today\"} className=\"date-picker\" />\n          <button onClick={this.getInvestments}>Search</button>\n        </div>\n        <table className=\"container\">\n          <tbody>\n            <tr>\n              <th>\n                <h1>Investment</h1>\n              </th>\n              <th>\n                <h1>Asset</h1>\n              </th>\n              <th>\n                <h1>Investment Date</h1>\n              </th>\n              <th>\n                <h1>Shares</h1>\n              </th>\n              <th>\n                <h1>Cost</h1>\n              </th>\n            </tr>\n            {investments}\n            <tr className=\"total\">\n              <td>Total</td>\n              <td />\n              <td />\n              <td>$ {totalShares}</td>\n              <td>$ {totalCost}</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>;\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './styles/index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}